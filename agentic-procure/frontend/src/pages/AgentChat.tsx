import React, { useState } from 'react';
import './AgentChat.css';

interface Message {
  id: string;
  type: 'user' | 'agent';
  content: string;
  timestamp: Date;
  agentType?: string;
  confidence?: number;
  sources?: string[];
}

const AgentChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'agent',
      content: 'Hello! I\'m your AI procurement assistant. I can help you with compliance questions, product requirements, supplier information, and RFP guidance. What would you like to know?',
      timestamp: new Date(),
      agentType: 'general',
      confidence: 0.95,
    },
  ]);
  const [inputValue, setInputValue] = useState('');
  const [selectedAgent, setSelectedAgent] = useState('general');
  const [isLoading, setIsLoading] = useState(false);

  const agents = [
    { id: 'general', name: 'General Assistant', icon: '🤖' },
    { id: 'compliance', name: 'Compliance Expert', icon: '🛡️' },
    { id: 'product-requirements', name: 'Product Requirements', icon: '📋' },
    { id: 'supplier-intelligence', name: 'Supplier Intelligence', icon: '🏢' },
  ];

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const agentMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'agent',
        content: `This is a mock response from the ${selectedAgent} agent. In production, this would be generated by AWS Bedrock using the Strands framework. I can help you with ${selectedAgent === 'compliance' ? 'compliance standards and risk assessment' : selectedAgent === 'product-requirements' ? 'product requirements and specifications' : selectedAgent === 'supplier-intelligence' ? 'supplier evaluation and intelligence' : 'general procurement questions'}.`,
        timestamp: new Date(),
        agentType: selectedAgent,
        confidence: 0.85,
        sources: ['ISO 13485:2016', 'FDA 21 CFR 820'],
      };

      setMessages(prev => [...prev, agentMessage]);
      setIsLoading(false);
    }, 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="agent-chat">
      <div className="page-header">
        <h1>AI Agent Chat</h1>
        <p>Chat with specialized AI agents for procurement assistance</p>
      </div>

      <div className="chat-container">
        <div className="agent-selector">
          <h3>Select Agent:</h3>
          <div className="agent-options">
            {agents.map((agent) => (
              <button
                key={agent.id}
                className={`agent-option ${selectedAgent === agent.id ? 'active' : ''}`}
                onClick={() => setSelectedAgent(agent.id)}
              >
                <span className="agent-icon">{agent.icon}</span>
                <span className="agent-name">{agent.name}</span>
              </button>
            ))}
          </div>
        </div>

        <div className="chat-messages">
          <div className="messages-container">
            {messages.map((message) => (
              <div key={message.id} className={`message ${message.type}`}>
                <div className="message-content">
                  <div className="message-text">{message.content}</div>
                  {message.type === 'agent' && (
                    <div className="message-meta">
                      {message.agentType && (
                        <span className="agent-type">{message.agentType}</span>
                      )}
                      {message.confidence && (
                        <span className="confidence">
                          Confidence: {(message.confidence * 100).toFixed(0)}%
                        </span>
                      )}
                      {message.sources && message.sources.length > 0 && (
                        <div className="sources">
                          <strong>Sources:</strong> {message.sources.join(', ')}
                        </div>
                      )}
                    </div>
                  )}
                  <div className="message-time">
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="message agent">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="chat-input">
          <div className="input-container">
            <textarea
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask your question here..."
              rows={3}
              className="message-input"
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isLoading}
              className="send-button"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AgentChat; 